{
	"info": {
		"_postman_id": "ipas-backend-collection",
		"name": "IPAS Backend - Generador desde YAML",
		"description": "Colección completa de endpoints para el backend generador IPAS. Incluye autenticación, endpoints CRUD para Usuario y Tarea, y pruebas automatizadas. Actualizada para modelos con campos opcionales.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "ipas-backend"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					"// Generar timestamp único para evitar conflictos",
					"pm.environment.set('timestamp', Date.now().toString());",
					"",
					"// Limpiar variables si es necesario",
					"if (!pm.environment.get('created_user_id')) {",
					"    pm.environment.set('created_user_id', '3');",
					"}",
					"if (!pm.environment.get('created_task_id')) {",
					"    pm.environment.set('created_task_id', '1');",
					"}"
				],
				"type": "text/javascript"
			}
		}
	],
	"item": [
		{
			"name": "🔐 Autenticación",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Verifica que el backend esté funcionando correctamente"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('status');",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response.status).to.eql('ok');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Login - Admin",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{admin_username}}\",\n  \"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login con credenciales de administrador"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has access token\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('access_token');",
									"    pm.expect(response).to.have.property('token_type');",
									"    pm.expect(response.token_type).to.eql('bearer');",
									"    pm.expect(response.access_token).to.be.a('string');",
									"    pm.expect(response.access_token.length).to.be.greaterThan(0);",
									"});",
									"",
									"// Guardar el token de admin para uso posterior",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('admin_token', response.access_token);",
									"    pm.environment.set('auth_token', response.access_token);",
									"    pm.environment.set('user_role', 'admin');",
									"    pm.environment.set('current_user_id', '1');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Login - Usuario",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{user_username}}\",\n  \"password\": \"{{user_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login con credenciales de usuario normal"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has access token\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('access_token');",
									"    pm.expect(response).to.have.property('token_type');",
									"    pm.expect(response.token_type).to.eql('bearer');",
									"    pm.expect(response.access_token).to.be.a('string');",
									"    pm.expect(response.access_token.length).to.be.greaterThan(0);",
									"});",
									"",
									"// Guardar el token de usuario para uso posterior",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('user_token', response.access_token);",
									"    pm.environment.set('auth_token', response.access_token);",
									"    pm.environment.set('user_role', 'usuario');",
									"    pm.environment.set('current_user_id', '2');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Current User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"me"
							]
						},
						"description": "Obtiene información del usuario actual autenticado"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user information\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('username');",
									"    pm.expect(response).to.have.property('rol');",
									"    pm.expect(response.id).to.be.a('number');",
									"    pm.expect(response.username).to.be.a('string');",
									"    pm.expect(response.rol).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "👥 Usuario CRUD",
			"item": [
				{
					"name": "Listar Usuarios",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/usuario/?skip=0&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"usuario",
								""
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Lista todos los usuarios (requiere permisos de admin)"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Users have correct structure\", function () {",
									"    const response = pm.response.json();",
									"    if (response.length > 0) {",
									"        const user = response[0];",
									"        pm.expect(user).to.have.property('id');",
									"        pm.expect(user).to.have.property('username');",
									"        pm.expect(user).to.have.property('rol');",
									"        pm.expect(user).to.have.property('deleted_at');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Crear Usuario",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"nuevo_usuario_{{$timestamp}}\",\n  \"password\": \"password123\",\n  \"rol\": \"usuario\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/usuario/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"usuario",
								""
							]
						},
						"description": "Crea un nuevo usuario (requiere permisos de admin)"
					},
					"response": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar timestamp único para evitar conflictos",
									"pm.environment.set('timestamp', Date.now().toString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"Response has user information\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('username');",
									"    pm.expect(response).to.have.property('rol');",
									"    pm.expect(response).to.have.property('deleted_at');",
									"    pm.expect(response.username).to.include('nuevo_usuario_');",
									"});",
									"",
									"// Guardar el ID del usuario creado",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('created_user_id', response.id.toString());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Obtener Usuario por ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/usuario/{{created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"usuario",
								"{{created_user_id}}"
							]
						},
						"description": "Obtiene un usuario específico por ID"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Si no hay created_user_id, usar un ID fijo para pruebas",
									"if (!pm.environment.get('created_user_id')) {",
									"    pm.environment.set('created_user_id', '3');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct user\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('username');",
									"    pm.expect(response).to.have.property('rol');",
									"    pm.expect(response).to.have.property('deleted_at');",
									"    pm.expect(response.id.toString()).to.eql(pm.environment.get('created_user_id'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Actualizar Usuario",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"usuario_actualizado_{{$timestamp}}\",\n  \"password\": \"password123\",\n  \"rol\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/usuario/{{created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"usuario",
								"{{created_user_id}}"
							]
						},
						"description": "Actualiza un usuario existente"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Si no hay created_user_id, usar un ID fijo para pruebas",
									"if (!pm.environment.get('created_user_id')) {",
									"    pm.environment.set('created_user_id', '3');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User was updated correctly\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('username');",
									"    pm.expect(response).to.have.property('rol');",
									"    pm.expect(response).to.have.property('deleted_at');",
									"    pm.expect(response.username).to.include('usuario_actualizado_');",
									"    pm.expect(response.rol).to.eql('admin');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Eliminar Usuario",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/usuario/{{created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"usuario",
								"{{created_user_id}}"
							]
						},
						"description": "Elimina un usuario (soft delete)"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Si no hay created_user_id, usar un ID fijo para pruebas",
									"if (!pm.environment.get('created_user_id')) {",
									"    pm.environment.set('created_user_id', '3');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Mis Usuarios",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/usuario/yo",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"usuario",
								"yo"
							]
						},
						"description": "Obtiene información del usuario actual"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user information\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    if (response.length > 0) {",
									"        const user = response[0];",
									"        pm.expect(user).to.have.property('id');",
									"        pm.expect(user).to.have.property('username');",
									"        pm.expect(user).to.have.property('rol');",
									"        pm.expect(user).to.have.property('deleted_at');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "📋 Tarea CRUD",
			"item": [
				{
					"name": "Listar Tareas",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tarea/?skip=0&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tarea",
								""
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Lista todas las tareas"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Tasks have correct structure\", function () {",
									"    const response = pm.response.json();",
									"    if (response.length > 0) {",
									"        const task = response[0];",
									"        pm.expect(task).to.have.property('id');",
									"        pm.expect(task).to.have.property('titulo');",
									"        pm.expect(task).to.have.property('descripcion');",
									"        pm.expect(task).to.have.property('usuario_id');",
									"        pm.expect(task).to.have.property('completada');",
									"        pm.expect(task).to.have.property('fecha_creacion');",
									"        pm.expect(task).to.have.property('deleted_at');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Crear Tarea",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"titulo\": \"Nueva tarea de prueba\",\n  \"descripcion\": \"Descripción de la nueva tarea\",\n  \"usuario_id\": {{current_user_id}},\n  \"completada\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tarea/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tarea",
								""
							]
						},
						"description": "Crea una nueva tarea"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"Response has task information\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('titulo');",
									"    pm.expect(response).to.have.property('descripcion');",
									"    pm.expect(response).to.have.property('usuario_id');",
									"    pm.expect(response).to.have.property('completada');",
									"    pm.expect(response).to.have.property('fecha_creacion');",
									"    pm.expect(response).to.have.property('deleted_at');",
									"    pm.expect(response.titulo).to.eql('Nueva tarea de prueba');",
									"    pm.expect(response.usuario_id).to.eql(parseInt(pm.environment.get('current_user_id')));",
									"});",
									"",
									"// Guardar el ID de la tarea creada",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('created_task_id', response.id.toString());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Obtener Tarea por ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tarea/{{created_task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tarea",
								"{{created_task_id}}"
							]
						},
						"description": "Obtiene una tarea específica por ID"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct task\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('titulo');",
									"    pm.expect(response).to.have.property('descripcion');",
									"    pm.expect(response).to.have.property('usuario_id');",
									"    pm.expect(response).to.have.property('completada');",
									"    pm.expect(response).to.have.property('fecha_creacion');",
									"    pm.expect(response).to.have.property('deleted_at');",
									"    pm.expect(response.id.toString()).to.eql(pm.environment.get('created_task_id'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Actualizar Tarea",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"titulo\": \"Tarea actualizada\",\n  \"descripcion\": \"Descripción actualizada\",\n  \"completada\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tarea/{{created_task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tarea",
								"{{created_task_id}}"
							]
						},
						"description": "Actualiza una tarea existente"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Task was updated correctly\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('titulo');",
									"    pm.expect(response).to.have.property('descripcion');",
									"    pm.expect(response).to.have.property('usuario_id');",
									"    pm.expect(response).to.have.property('completada');",
									"    pm.expect(response).to.have.property('fecha_creacion');",
									"    pm.expect(response).to.have.property('deleted_at');",
									"    pm.expect(response.titulo).to.eql('Tarea actualizada');",
									"    pm.expect(response.completada).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Eliminar Tarea",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tarea/{{created_task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tarea",
								"{{created_task_id}}"
							]
						},
						"description": "Elimina una tarea (soft delete)"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Mis Tareas",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tarea/yo?skip=0&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tarea",
								"yo"
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Obtiene las tareas del usuario actual"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Tasks belong to current user\", function () {",
									"    const response = pm.response.json();",
									"    const currentUserId = parseInt(pm.environment.get('current_user_id'));",
									"    response.forEach(task => {",
									"        pm.expect(task.usuario_id).to.eql(currentUserId);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "🔒 Pruebas de Seguridad",
			"item": [
				{
					"name": "Acceso Sin Token - Usuarios",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/usuario/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"usuario",
								""
							]
						},
						"description": "Prueba acceso sin autenticación a usuarios"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 or 403\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
									"});",
									"",
									"pm.test(\"Response indicates authentication required\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('detail');",
									"    pm.expect(response.detail).to.include('Not authenticated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Acceso Sin Token - Tareas",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/tarea/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tarea",
								""
							]
						},
						"description": "Prueba acceso sin autenticación a tareas"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 or 403\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
									"});",
									"",
									"pm.test(\"Response indicates authentication required\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('detail');",
									"    pm.expect(response.detail).to.include('Not authenticated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Token Inválido - Usuarios",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer token_invalido"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/usuario/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"usuario",
								""
							]
						},
						"description": "Prueba acceso con token inválido a usuarios"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 or 403\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
									"});",
									"",
									"pm.test(\"Response indicates invalid credentials\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('detail');",
									"    pm.expect(response.detail).to.include('No se pudieron validar las credenciales');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Token Inválido - Tareas",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer token_invalido"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tarea/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tarea",
								""
							]
						},
						"description": "Prueba acceso con token inválido a tareas"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 or 403\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
									"});",
									"",
									"pm.test(\"Response indicates invalid credentials\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('detail');",
									"    pm.expect(response.detail).to.include('No se pudieron validar las credenciales');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "📊 Documentación",
			"item": [
				{
					"name": "Obtener Documentación OpenAPI",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/docs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"docs"
							]
						},
						"description": "Obtiene la documentación interactiva de la API"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Obtener Esquema OpenAPI JSON",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/openapi.json",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"openapi.json"
							]
						},
						"description": "Obtiene el esquema OpenAPI en formato JSON"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is valid JSON\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('openapi');",
									"    pm.expect(response).to.have.property('info');",
									"    pm.expect(response).to.have.property('paths');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoints de documentación de la API"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script de pre-request global",
					"console.log('Ejecutando request:', pm.request.name);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script de test global",
					"console.log('Response status:', pm.response.code);",
					"console.log('Response time:', pm.response.responseTime + 'ms');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8001"
		}
	]
} 